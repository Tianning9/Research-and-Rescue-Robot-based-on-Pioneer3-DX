// Generated by gencpp from file common_msgs/single.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_SINGLE_H
#define COMMON_MSGS_MESSAGE_SINGLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common_msgs
{
template <class ContainerAllocator>
struct single_
{
  typedef single_<ContainerAllocator> Type;

  single_()
    : x()
    , y()
    , z()
    , type(0)  {
    }
  single_(const ContainerAllocator& _alloc)
    : x(_alloc)
    , y(_alloc)
    , z(_alloc)
    , type(0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _x_type;
  _x_type x;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _y_type;
  _y_type y;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _z_type;
  _z_type z;

   typedef int32_t _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::common_msgs::single_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::single_<ContainerAllocator> const> ConstPtr;

}; // struct single_

typedef ::common_msgs::single_<std::allocator<void> > single;

typedef boost::shared_ptr< ::common_msgs::single > singlePtr;
typedef boost::shared_ptr< ::common_msgs::single const> singleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::single_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::single_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::single_<ContainerAllocator1> & lhs, const ::common_msgs::single_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::single_<ContainerAllocator1> & lhs, const ::common_msgs::single_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::single_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::single_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::single_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::single_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::single_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::single_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::single_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f6c9c1aa8b2564fc06876f708f01236c";
  }

  static const char* value(const ::common_msgs::single_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf6c9c1aa8b2564fcULL;
  static const uint64_t static_value2 = 0x06876f708f01236cULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::single_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/single";
  }

  static const char* value(const ::common_msgs::single_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::single_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] x\n"
"float32[] y\n"
"float32[] z\n"
"int32 type\n"
;
  }

  static const char* value(const ::common_msgs::single_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::single_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct single_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::single_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::single_<ContainerAllocator>& v)
  {
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "z[]" << std::endl;
    for (size_t i = 0; i < v.z.size(); ++i)
    {
      s << indent << "  z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.z[i]);
    }
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_SINGLE_H
